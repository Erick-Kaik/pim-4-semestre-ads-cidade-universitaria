// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace HotelariaControle.Data.Models
{
    public partial class BD_HotelContext : DbContext
    {
        public BD_HotelContext()
        {
        }

        public BD_HotelContext(DbContextOptions<BD_HotelContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Consumo> Consumo { get; set; }
        public virtual DbSet<Fornecedores> Fornecedores { get; set; }
        public virtual DbSet<Funcionarios> Funcionarios { get; set; }
        public virtual DbSet<Hospedes> Hospedes { get; set; }
        public virtual DbSet<Produtos> Produtos { get; set; }
        public virtual DbSet<Quartos> Quartos { get; set; }
        public virtual DbSet<Reservas> Reservas { get; set; }
        public virtual DbSet<Usuarios> Usuarios { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-112OH85\\SQLEXPRESS;Initial Catalog=BD_Hotel;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AS");

            modelBuilder.Entity<Consumo>(entity =>
            {
                entity.HasKey(e => e.IdConsumo)
                    .HasName("PK_CONSUMO");

                entity.HasOne(d => d.IdProdutoNavigation)
                    .WithMany(p => p.Consumo)
                    .HasForeignKey(d => d.IdProduto)
                    .HasConstraintName("FK_Produto");

                entity.HasOne(d => d.IdReservaNavigation)
                    .WithMany(p => p.Consumo)
                    .HasForeignKey(d => d.IdReserva)
                    .HasConstraintName("FK_IdReserva");
            });

            modelBuilder.Entity<Fornecedores>(entity =>
            {
                entity.HasKey(e => e.IdFornecedor)
                    .HasName("PK_FORNECEDOR");

                entity.Property(e => e.NomeFornecedor).IsUnicode(false);

                entity.Property(e => e.Telefone)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TelefoneAlt)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.IdProdutoNavigation)
                    .WithMany(p => p.Fornecedores)
                    .HasForeignKey(d => d.IdProduto)
                    .HasConstraintName("FK__Produto");
            });

            modelBuilder.Entity<Funcionarios>(entity =>
            {
                entity.HasKey(e => e.IdFuncionario)
                    .HasName("PK_FUNCIONARIO");

                entity.Property(e => e.Cargo).IsUnicode(false);

                entity.Property(e => e.Cpf)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.Rg).IsUnicode(false);

                entity.Property(e => e.Telefone)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TelefoneAlt)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Hospedes>(entity =>
            {
                entity.HasKey(e => e.IdHospede)
                    .HasName("PK_HOSPEDE");

                entity.Property(e => e.Cpf)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Email).IsUnicode(false);

                entity.Property(e => e.Nome).IsUnicode(false);

                entity.Property(e => e.Telefone)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.TelefoneAlt)
                    .IsUnicode(false)
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<Produtos>(entity =>
            {
                entity.HasKey(e => e.IdProduto)
                    .HasName("PK_PRODUTO");

                entity.Property(e => e.NomeProduto).IsUnicode(false);
            });

            modelBuilder.Entity<Quartos>(entity =>
            {
                entity.HasKey(e => e.IdQuarto)
                    .HasName("PK_QUARTO");

                entity.Property(e => e.TipoQuarto).IsUnicode(false);
            });

            modelBuilder.Entity<Reservas>(entity =>
            {
                entity.HasKey(e => e.IdReserva)
                    .HasName("PK_RESERVA");

                entity.HasOne(d => d.IdHospedeNavigation)
                    .WithMany(p => p.Reservas)
                    .HasForeignKey(d => d.IdHospede)
                    .HasConstraintName("FK_IdHospede");

                entity.HasOne(d => d.IdQuartoNavigation)
                    .WithMany(p => p.Reservas)
                    .HasForeignKey(d => d.IdQuarto)
                    .HasConstraintName("FK_IdQuarto");
            });

            modelBuilder.Entity<Usuarios>(entity =>
            {
                entity.HasKey(e => e.IdUsuario)
                    .HasName("PK_USUARIO");

                entity.Property(e => e.Usuario).IsUnicode(false);

                entity.Property(e => e.Senha).IsUnicode(false);

                entity.Property(e => e.Tipo).IsUnicode(false);

                entity.HasOne(d => d.IdFuncionarioNavigation)
                    .WithMany(p => p.Usuarios)
                    .HasForeignKey(d => d.IdFuncionario)
                    .HasConstraintName("FK_IdFuncionario");

                entity.HasOne(d => d.IdHospedeNavigation)
                    .WithMany(p => p.Usuarios)
                    .HasForeignKey(d => d.IdHospede)
                    .HasConstraintName("FK__IdHospede");
            });


            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}